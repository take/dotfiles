# debug
snippet     yaml
abbr        raise to yaml
    raise ${1}.to_yaml

snippet     inspect
abbr        raise inspect
    raise ${1}.inspect

snippet     method source_location
abbr        method source_location
    method(:${1}).source_location

snippet     awesome_print
abbr        print awesome
    require 'awesome_print'
    ap ${1}

snippet     pry
abbr        pry
    require 'pry'; binding.pry

# rspec
snippet     context
abbr        context
    context '${1}' do
      ${2}
    end

snippet     before
abbr        before
    before do
      ${1}
    end

snippet     it
abbr        it
    it '${1}' do
      ${2}
    end

snippet     describe
abbr        describe
    describe '${1}' do
      ${2}
    end

snippet     expect
abbr        expect to
    expect(${1}).to

snippet     subject
abbr        subject
    subject { ${1} }

snippet     share
abbr        shared_examples_for
prev_word      '^'
    shared_examples_for '${1:name}' do
    end

snippet     let
abbr        let(:name) {}
prev_word   '^'
    let(:${1:symbol}) { ${2} }

# capybara
snippet     within
abbr        within do
    within '${1}' do
      ${2}
    end

snippet     fill_in
abbr        fill_in with
    fill_in('${1}', with: ${2})

snippet     select
abbr        select from
    select('${1}', from: '${2}')

snippet     click_on
abbr        click_on
options     head
    click_on '${1}'

snippet     click_link
abbr        click_link
options     head
    click_link '${1}'

snippet     click_button
abbr        click_button
options     head
    click_button '${1}'

# ruby
snippet     ini
abbr        def initialize end
    def initialize(${1})
      ${2}
    end

snippet def
    def ${1:method_name}
        ${2}
    end

snippet if
    if ${1:condition}
        ${2}
    end

snippet ife
    if ${1:condition}
        ${2}
    else
        ${3}
    end
snippet elsif
    elsif ${1:condition}
        ${2}

snippet unless
    unless ${1:condition}
        ${2}
    end

snippet until
    until ${1:condition}
        ${2}
    end

snippet mod
abbr    module .. end
    module ${1:name}
        ${2}
    end

snippet     class
abbr        class end
    class ${1}
    end

snippet defs
    def self.${1}
    end

snippet r
    attr_reader :${1:attr_names}
snippet w
    attr_writer :${1:attr_names}
snippet rw
    attr_accessor :${1:attr_names}
