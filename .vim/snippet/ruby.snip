# debug
snippet     yaml
abbr        raise to yaml
    raise ${1}.to_yaml

snippet     inspect
abbr        raise inspect
    raise ${1}.inspect

snippet     method source_location
abbr        method source_location
    method(:${1}).source_location

snippet     awesome_print
abbr        print awesome
    require 'awesome_print'
    ap ${1}

snippet     pry
abbr        pry
    require 'pry'; binding.pry

# rspec
snippet     context
abbr        context
    context '${1}' do
      ${2}
    end

snippet     before
abbr        before
    before do
      ${1}
    end

snippet     it
abbr        it
    it '${1}' do
      ${2}
    end

snippet     describe
abbr        describe
    describe '${1}' do
      ${2}
    end

snippet     expect
abbr        expect to
    expect(${1}).to

snippet     subject
abbr        subject
    subject { ${1} }

snippet     share
abbr        shared_examples_for
prev_word      '^'
    shared_examples_for '${1:name}' do
    end

snippet     let
abbr        let(:name) {}
prev_word   '^'
    let(:${1:symbol}) { ${2} }

# capybara
snippet     within
abbr        within do
    within '${1}' do
      ${2}
    end

snippet     fill_in
abbr        fill_in with
    fill_in('${1}', with: ${2})

snippet     select
abbr        select from
    select('${1}', from: '${2}')

snippet     click_on
abbr        click_on
options     head
    click_on '${1}'

snippet     click_link
abbr        click_link
options     head
    click_link '${1}'

snippet     click_button
abbr        click_button
options     head
    click_button '${1}'

# ruby
snippet     ini
abbr        def initialize end
    def initialize(${1})
      ${2}
    end

snippet def
    def ${1:method_name}
        ${2}
    end

snippet if
    if ${1:condition}
        ${2}
    end

snippet ife
    if ${1:condition}
        ${2}
    else
        ${3}
    end
snippet elsif
    elsif ${1:condition}
        ${2}

snippet unless
    unless ${1:condition}
        ${2}
    end

snippet until
    until ${1:condition}
        ${2}
    end

snippet mod
abbr    module .. end
    module ${1:name}
        ${2}
    end

snippet     class
abbr        class end
    class ${1}
    end

snippet am
    alias_method :${1:new_name}, :${2:old_name}

snippet array
    Array.new(${1:10}) { |${2:i}| ${3} }

snippet hash
    Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }

snippet dir
    Filename.dirname(__FILE__)

snippet defs
    def self.${1}
    end

snippet r
    attr_reader :${1:attr_names}
# attr_writer
snippet w
    attr_writer :${1:attr_names}
# attr_accessor
snippet rw
    attr_accessor :${1:attr_names}
# include Enumerable

snippet     begin
abbr        begin rescue end
    begin
      ${1}
    rescue => e
      ${2}
    end

snippet     begine
abbr        begin rescue end
    begin
      ${1}
    rescue => e
      ${2}
    ensure
      ${3}
    end

snippet     each
abbr        each do
    each do |${1}|
    end

snippet     while
abbr        while end
    while ${1} do
      ${2}
    end

snippet     utf
abbr        utf-8 magick
prev_word    '^'
    # coding: utf-8

snippet     #!
abbr        #!/usr/local/bin/ruby
prev_word   '^'
    #!/usr/local/bin/ruby

snippet     =b
abbr        =begin rdoc ...  =end
prev_word   '^'
    =begin rdoc
        ${1}
    =end

snippet     y
abbr        yields
prev_word  '^'
    :yields: ${1:arguments}

snippet req
    require '${1}'

snippet end
    __END__
snippet case
    case ${1:object}
    when ${2:condition}
        ${3}
    end
snippet when
    when ${1:condition}

snippet nam
    namespace :${1:name} do
        ${2}
    end

snippet     watcher
prev_word        '^'
    require 'digest/md5'
    def calc_md5(filename)
      Digest::MD5.hexdigest(File.open(filename, 'rb').read)
    end

    def main
      @md5 = {}
      Dir.glob("app/**/*.rb").each  { |f| @md5[f] = calc_md5(f) }
      Dir.glob("spec/**/*.rb").each { |f| @md5[f] = calc_md5(f) }
    end

    main

    watch('app/(.*)\.rb') {|code|
      if @md5[code[0]] == calc_md5(code[0])
        puts "Saved: #{code[0]}"
      else
        puts "Saved & Changed: #{code[0]}"
        system "bundle exec rspec spec/#{code[1]}_spec.rb"
        @md5[code[0]] = calc_md5(code[0])
      end
    }
    watch('spec/(.*)_spec\.rb') {|code|
      if @md5[code[0]] == calc_md5(code[0])
        puts "Saved: #{code[0]}"
      else
        puts "Saved & Changed: #{code[0]}"
        system "bundle exec rspec #{code[0]}"
        @md5[code[0]] = calc_md5(code[0])
      end
    }

snippet     404
    match "*path" => 'error#handle404'
